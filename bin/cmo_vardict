#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python

import argparse, os, sys, subprocess, re
import cmo, time, copy
from datetime import date



def find_vardict_options(vardict_version):
    vardict_cmd = cmo.util.programs['vardict'][vardict_version]
    vardict_help = subprocess.Popen(vardict_cmd, shell=True, stdout=subprocess.PIPE, stderr=open(os.devnull, "wb")).communicate()[0]
    lines = vardict_help.split("\n")
    last_sarg=''
    arg_type = None
    last_desc=''
    parsed_options = []
    for line in lines:
        m = re.match(r"\s+(-\S+) (<[\S\s]+>)?\s+(.*$)", line)
        if m:
            if last_sarg:
                parsed_options.append((last_sarg, arg_type, last_desc))
            last_sarg = m.group(1)
            arg_type = m.group(2)
            last_desc=m.group(3)
        else:
            last_desc = last_desc + line
    parsed_options.append((last_sarg, arg_type, last_desc))
    return parsed_options
                

def run_vardict(vardict_version, args, vcf_output):
    args_dict = copy.deepcopy(vars(args))
    del args_dict['version']
    del args_dict['b2']
    del args_dict['vcf']
    command = [cmo.util.programs['vardict'][vardict_version]]
    for argument, value in args_dict.items():
        if argument == 'bedfile' or argument=='N2':
            continue;
        elif value:
            if value == True:
                command = command + ["-"+argument.replace("_","-")]
            else:
                command = command + ["-"+argument.replace("_","-"), value]
    command = command + [args_dict['bedfile']]
    #ronak example command:
    #/path/to/VarDict -th 10 -G /path/to/reference -N TumorSampleID -b "/path/to/Tumor.bam|/path/to/Normal.bam" -Q 20 -q 20 -f 0.01 -C -z 1 -c 1 -S 2 -E 3 -x 2000 -X 5 /path/to/targets.bed | testsomatic.R | /path/to/var2vcf_paired.pl -N "TumorSampleID|NormalSampleID" -f 0.01
    somatic_cmd = cmo.util.programs['vardict_bin'][vardict_version] + "testsomatic.R"
    vcf_cmd = [cmo.util.programs['vardict_bin'][vardict_version] + "var2vcf_paired.pl"]
    vcf_cmd = vcf_cmd + ['-N', '"' + args_dict['N'] + "|" + args_dict['N2'] + '"']
    if args_dict['f'] != None:
        vcf_cmd = vcf_cmd + ['-f', args_dict['f']]
    command = command + ["|", somatic_cmd, "|", " ".join(vcf_cmd), ">", os.path.abspath(vcf_output)]
    cmo.util.call_cmd(" ".join(command))


if __name__ =='__main__':
    preparser = argparse.ArgumentParser(description="run vardict", add_help=False)
    preparser.add_argument("-v", "--version", action="store", choices=cmo.util.programs['vardict'].keys(), default="default")
    opts, _ = preparser.parse_known_args()
    parser = argparse.ArgumentParser(parents=[preparser], add_help=True)
    vardict_options = find_vardict_options(opts.version)
    parser.add_argument("bedfile", action="store", metavar="BEDFILE")
    for (short_arg, arg_type, description) in  vardict_options:
        description=description.replace("%","%%")
        if short_arg =="-h":
            short_arg="-hh"
        if short_arg in ["-G", "-v"]:
            continue
        if(arg_type == None):
            action="store_true"
        else:
            action="store"
        if(short_arg == '-N'):
            description = "Tumor Sample Name"
            parser.add_argument("-N2", required=True, help="Normal Sample Name")
        if(short_arg == '-b'):
            description = "Tumor bam"
            parser.add_argument("-b2", required=True, help="Normal bam")
        parser.add_argument(short_arg, action=action, help=description)
    parser.add_argument("-G", choices=cmo.util.genomes.keys(), default="GRCh37")
    parser.add_argument("--vcf", required=True, help="output vcf file")
    args = parser.parse_args()
    args.b = '"' + os.path.abspath(args.b) + "|" + os.path.abspath(args.b2) + '"'
    genome_string = args.G
    args.G=cmo.util.genomes[args.G]['fasta']
    run_vardict(opts.version, args, args.vcf)



