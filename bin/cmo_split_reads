#!/ifs/work/pi/roslin-pipelines/roslin-core/2.0.6/config/variant/2.4.2/virtualenv/bin/python

import argparse, os, sys, signal, subprocess, math, gzip, io
import cmo
import multiprocessing

def chunk(fastq, platform_unit, lines_per_chunk):
    logger = cmo.util.get_logger()
    output_prefix = os.path.basename(fastq).split(".", 1)[0] + ".chunk"
    if(platform_unit != None):
        exploded = output_prefix.split("_")
        exploded[0]=platform_unit
        output_prefix = "-".join(exploded)
    # output_prefix = output_prefix+"chunk"
    logger.info("Opening %s and writing reads..." % (fastq))
    #these aren't relaly gz but trimgalore doesnt like files not named gz...great work trimgalore
    os.popen('zcat %s | split -l %d -d --additional-suffix=.fastq.gz --suffix-length 3 - %s' % (fastq, lines_per_chunk, output_prefix))
    return True


if __name__ =='__main__':
    logger = cmo.util.get_logger()
    parser = argparse.ArgumentParser(description="split files into chunks based on filesize")
    parser.add_argument('-f1', "--fastq1", action='store', help="filename to split", required=True)
    parser.add_argument('-f2', "--fastq2", action='store', help="filename2 to split")
    parser.add_argument('-p', "--platform-unit", action='store', help="RG/PU ID", required=True)
    args = parser.parse_args()
    fastqs = [args.fastq1]
    if args.fastq2:
        fastqs.append(args.fastq2)
    filesize = os.path.getsize(fastqs[0])
    logger.info("Fastq1 Filesize: %sGB" % ("{:.2f}".format(float(filesize)/1000000000)))
    lines_per_chunk = 182560840
    logger.info("%s lines per chunk" % str(lines_per_chunk))
    pool=multiprocessing.Pool(processes=2)
    for fastq in fastqs:
        result = pool.apply_async(chunk, args=(fastq, args.platform_unit, lines_per_chunk ))
    pool.close()
    pool.join()
