#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python
from cmo import workflow
import argparse, os, sys, re
import cmo, shutil 
from distutils.version import StrictVersion

def run_kallisto(fastq_filenames, outputdir, transcripts = "pc_transcripts",
                 processors = 5, bootstraps = 100):
    fastq_filenames = [os.path.abspath(file) for file in fastq_filenames]
    outputdir = os.path.abspath(outputdir)
    outputdir = outputdir + "/kallisto" + "." + transcripts
    if not os.path.exists(outputdir): os.makedirs(outputdir)
    kallisto_cmd = [cmo.util.programs['kallisto']["0.43.0"], "quant",
                    "-i", cmo.util.genomes[args.reference_sequence]['default']['kallisto_index'] + "." + transcripts,
                    "-o", outputdir,
                    "--bias",
                    "-b", str(bootstraps),
                    "-t", str(processors)] + fastq_filenames
    return workflow.Job(" ".join(kallisto_cmd),
                        resources="rusage[mem=15]",
                        name="Run kallisto " + transcripts,
                        processors = processors)

def star_alignment(fastq_filenames, outputdir, processors = 10):
    fastq_filenames = [os.path.abspath(file) for file in fastq_filenames]
    if len(fastq_filenames) > 2:
        input_R1 = ",".join(fastq_filenames[::2]) ## comma delimited, alternate files
        input_R2 = ",".join(fastq_filenames[1::2])
    else:
        input_R1 = fastq_filenames[0]
        input_R2 = fastq_filenames[1]

    gzipped = re.match(r'.*\.gz$', fastq_filenames[0])
    outFileNamePrefix = os.path.abspath(outputdir) + "/"

    star_cmd = [cmo.util.programs['star']["default"]]
    if gzipped: 
        star_cmd += ["--readFilesCommand zcat"]
    star_cmd += ["--genomeDir", cmo.util.genomes[args.reference_sequence]['default']['star_index'],
                 "--readFilesIn", input_R1, input_R2,
                 "--outFileNamePrefix", outFileNamePrefix,
                 "--runThreadN", str(processors),
                 "--outSAMtype BAM SortedByCoordinate",
                 "--limitBAMsortRAM", str(90000000000), ### looks like large bams need as much as this?
                 "&&",
                 cmo.util.programs['samtools']["1.3.1"], "index",
                 outFileNamePrefix + "Aligned.sortedByCoord.out.bam",
                 "&&",
                 "rm -rf",
                 outFileNamePrefix + "_STARtmp"]
    return workflow.Job(" ".join(star_cmd), 
                        resources="rusage[mem=100]", 
                        name="Run STAR alignment",
                        processors = processors)

def run_QoRT(bam_file, outputdir):
    """'Quality of RNA' metrics and counts"""

    bam_file = os.path.abspath(bam_file)
    outputdir = os.path.abspath(outputdir)

    QoRT_cmd = [cmo.util.programs['samtools']["1.3.1"],
                "view -b -F 4 -F 8", 
                bam_file,
                "|",
                cmo.util.programs['java']["default"], 
                "-Xmx40G",
                "-jar", cmo.util.programs['QoRT']["default"], 
                "QC",
                # "--runFunctions", "writeKnownSplices,writeNovelSplices,writeSpliceExon,writeDESeq" ### run functions required for JunctionSeq & DESeq only
                "-",
                cmo.util.genomes[args.reference_sequence]['default']['gtf'],
                outputdir]
    # QoRT_cmd = [cmo.util.programs['java']["default"], 
    #             "-Xmx40G",
    #             "-jar", cmo.util.programs['QoRT']["default"], 
    #             "QC",
    #             # "--runFunctions", "writeKnownSplices,writeNovelSplices,writeSpliceExon,writeDESeq" ### run functions required for JunctionSeq & DESeq only
    #             bam_file,
    #             cmo.util.genomes[args.reference_sequence]['default']['gtf'],
    #             outputdir]
    return workflow.Job(" ".join(QoRT_cmd), 
                        resources="rusage[mem=50]", 
                        name="Run QoRT")

def compute_insert_length(bam_file, outputdir):
    """use MISO to compute insert length distribution"""

    bam_file = os.path.abspath(bam_file)
    outputdir = os.path.abspath(outputdir)

    insert_length_cmd = ["pe_utils", "--compute-insert-len", 
                         bam_file, cmo.util.genomes[args.reference_sequence]['default']['const_exons'], 
                         "--output-dir", outputdir]
    return workflow.Job(" ".join(insert_length_cmd), 
                        resources="rusage[mem=35]", 
                        name="Compute Insert Length")
    
def run_miso(bam_file, AS_type, outputdir):
    """Run MISO differential splicing"""
    bam_file = os.path.abspath(bam_file)
    outputdir = os.path.abspath(outputdir)

    if AS_type == "SE": 
        processors = 20
    else:
        processors = 10

    miso_cmd = ["mkdir", "-p", outputdir, 
                "&&",
                "miso", "--run",
                cmo.util.genomes[args.reference_sequence]['default']['miso_index'] + "/indexed_" + AS_type + "_events",
                bam_file,
                "--output-dir", outputdir, 
                "--paired-end", "$(head -1 " + bam_file + ".insert_len | awk -F '=|,' '{print($2, $4)}')", ### insert length & stdev (paired end)
                "--read-len", "$(", cmo.util.programs['samtools']["1.3.1"], "view", bam_file, "| head -1 | awk '{print length($10)}')", ### read length from bam file (single end)
                "-p", str(processors),
                "&&",
                "summarize_miso", "--summarize-samples",
                outputdir, outputdir
                ]
    return workflow.Job(" ".join(miso_cmd), 
                        resources="rusage[mem=40]", 
                        processors = processors,
                        name="Run MISO " + AS_type)

def pack_miso(outputdir):
    outputdir = os.path.abspath(outputdir)
    pack_cmd = ["miso_pack", "--pack", outputdir]
    return workflow.Job(" ".join(pack_cmd),
                        resources="rusage[mem=10]",
                        name="Pack MISO")

def run_bento_seq(bam_file, outputdir):
    """http://biorxiv.org/content/early/2016/04/02/046474"""
    bam_file = os.path.abspath(bam_file)
    outputdir = os.path.abspath(outputdir)
    bento_seq_cmd = ["bento-seq", 
                     cmo.util.genomes[args.reference_sequence]['default']['bento_seq_index'],
                     "--bam_files", 
                     bam_file,
                     "--output_file",
                     outputdir + "/bento-seq.out"]
    return workflow.Job(" ".join(bento_seq_cmd),
                        resources="rusage[mem=10]",
                        name="Run BENTO-Seq")

def run_check(samplefile = "samples.txt"):
    """
    give a list of expected output files for each algorithm
    it must be a list() even if there's just one file
    """
    import os, sys, pandas
    outputfiles = dict()
    outputfiles["STAR"] = ["Aligned.sortedByCoord.out.bam"]
    outputfiles["QoRT"] = ["QC.QORTS_COMPLETED_OK"]
    outputfiles["MISO"] = ["MISO/A3SS/summary/A3SS.miso_summary", "MISO/A5SS/summary/A5SS.miso_summary", "MISO/MXE/summary/MXE.miso_summary", "MISO/RI/summary/RI.miso_summary", "MISO/SE/summary/SE.miso_summary"]
    outputfiles["BENTO-Seq"] = ["bento-seq.out"]
    outputfiles["kallisto"] = ["kallisto.pc_transcripts/abundance.txt", "kallisto.transcripts/abundance.txt"]
    samplefile = os.path.abspath(samplefile)
    table = pandas.read_table(open(samplefile), sep='\t', lineterminator='\n')
    paths = list(set(table["path"]))
    missing_file_list = list()
    for path in paths:
        for algo in outputfiles.keys(): 
            if not all([os.path.isfile(os.path.join(path, outputfile)) for outputfile in outputfiles[algo]]):
                missing_file_list.append(path + " " + algo)
    if len(missing_file_list):
        missing_file_file = open("missing_files.txt", 'w')
        for m in missing_file_list: 
            missing_file_file.write(m)
            missing_file_file.write('\n')
        missing_file_file.close()
        sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Run RNASeq on luna!\n" + 
        "Alex Penson <pensona@mskcc.org>")
    parser.add_argument("-R", "--reference_sequence", required=True, 
                        choices=cmo.util.genomes.keys(),
                        help="name of reference")
    parser.add_argument("-o", "--outputdir", default = ".",
                        help="output dir, will default to '.'")
    parser.add_argument("-b", "--bam", default = False,
                        help="BAM file (disables kallisto)")
    parser.add_argument('fastqs', nargs='*', 
                        help='fastq files for processing')
    args = parser.parse_args()
    print(args)

    jobs_list = list()
    jobs_dict = dict()

    if args.bam == False:
        kallisto_pc = run_kallisto(args.fastqs, args.outputdir, transcripts = "pc_transcripts")
        jobs_list.append(kallisto_pc)
        
        kallisto_all = run_kallisto(args.fastqs, args.outputdir, transcripts = "transcripts")
        jobs_list.append(kallisto_all)

        if(len(args.fastqs) % 2 == 1): sys.exit("must supply fastqs in pairs")
        
        star = star_alignment(args.fastqs, args.outputdir)
        jobs_list.append(star)
        
    if args.bam == False:
        ### run from fastq
        bam_file = "".join([args.outputdir, "/Aligned.sortedByCoord.out.bam"])
    else:
        bam_file = args.bam
        ### test that input bam file exists
        if not os.path.isfile(bam_file): sys.exit("BAM file " + " does not exist")

    QoRT = run_QoRT(bam_file, args.outputdir)
    jobs_list.append(QoRT)

    bento_seq = run_bento_seq(bam_file, args.outputdir)
    jobs_list.append(bento_seq)
    
    insert_length = compute_insert_length(bam_file, args.outputdir)
    jobs_list.append(insert_length)
    
    if args.bam == False:
        jobs_dict[star] = [QoRT, bento_seq, insert_length]

    # pack = pack_miso(args.outputdir)

    jobs_dict[insert_length] = list()
    for AS_type in ["SE", "A3SS", "A5SS", "MXE", "RI"]:
        miso = run_miso(bam_file, AS_type, args.outputdir + "/MISO/" + AS_type)
        jobs_list.append(miso)
        jobs_dict[insert_length].append(miso)
        # jobs_dict[miso] = pack
        
    # jobs_list.append(pack)

    name = "RNASeq Workflow"
    if not args.bam == False: name = name + " (from BAM)"
    new_workflow = workflow.Workflow(jobs_list, 
                                     jobs_dict, 
                                     name=name)
    new_workflow.run('LSF')
    
