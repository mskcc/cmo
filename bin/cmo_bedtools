#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python

import argparse, os, sys, re, subprocess,itertools
import cmo
logger = cmo.util.get_logger()

def find_sub_command_options(bedtools_command):
    bedtools_help = subprocess.Popen(bedtools_command + " -h",stderr=subprocess.PIPE,shell=True).communicate()[1]
    lines = bedtools_help.split("\n")
    options_block = False
    usage = ''
    options = ''
    last_option = ''
    last_option_help = ' ' 
    valid_args = []
    for line in lines:
        if re.search("Usage:", line):
            usage = line
            continue
        elif re.search("Options:", line):
            options_block = True
            continue
        if re.search("Notes:", line):
            options_block = False
        if options_block:
            m = re.match(r"^[\t ]+(-\w+)[\t ]+(.*)$", line)
            if m:
                if last_option != '':
                    valid_args.append((last_option, last_option_help))
                last_option = m.group(1)
                last_option_help = m.group(2)
            elif last_option:
                last_option_help += line
    valid_args.append((last_option, last_option_help))
    valid_args = valid_args +  re.findall(r"(?:(-\S+) ([^-]+))", usage)
    #FIXME only captures one line of bedtools help, more better regex needed
    args_dict = dict()
    for (arg, value) in valid_args: 
        if arg not in args_dict:
            args_dict[arg]=value
        else:
            if len(value) > len(args_dict[arg]):
                #more informative help, presumably(?)
                args_dict[arg]=value
    return args_dict

def find_sub_commands(path):
    sub_commands = [f for f in os.listdir(path) if os.path.isfile(os.path.join(path,f)) ]
    sub_commands.remove("bedtools")
    return sub_commands

if __name__ =='__main__':
    #partially parse options to get versin/subcommand and add more options
    verparser = argparse.ArgumentParser(description="run bedtools", add_help=False)
    verparser.add_argument("--version", choices=cmo.util.programs['bedtools'].keys(), default="default")
    options, _ = verparser.parse_known_args()
    preparser = argparse.ArgumentParser(parents=[verparser], add_help=False)
    preparser.add_argument("cmd", choices=find_sub_commands(cmo.util.programs['bedtools'][options.version]))
    selection,_ = preparser.parse_known_args()
    bedtools_command = os.path.join(cmo.util.programs['bedtools'][options.version], selection.cmd)
    sub_command_options = find_sub_command_options(bedtools_command)
    #ok it was a valid subcommand, add the options we found and the genome option
    parser = argparse.ArgumentParser(parents= [ preparser ], add_help=True, 
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    group = parser.add_argument_group(selection.cmd)
    for arg, help in sub_command_options.items():
        help = help.replace("%","%%")
        if(arg =="-fi"):
            group.add_argument(arg, action="store", choices=cmo.util.genomes.keys())
        #FIXME: parsing this shit kind of sucks, this is a bandaid.
        elif arg in ["-tab"]:
            group.add_argument(arg, action="store_true", help=help) 
        elif arg in ['-bed', '-fo']:
            group.add_argument(arg, action="store", metavar='', help=help)
        elif re.search("\.\.",help): #more than one arg is accepted
            group.add_argument(arg, action="store", nargs="+", metavar='')
        elif re.search("(FLOAT|INTEGER|Float|Integer|Default|<.*>)", help):
            group.add_argument(arg, action="store", metavar='', help=help)
        else:
            group.add_argument(arg, action="store_true", help=help) 
#    parser.add_argument("--genome", required=True, choices=cmo.util.genomes.keys())
    parser.prog="cmo_bedtools " + selection.cmd
    args = parser.parse_args()
    command_specific_args = vars(args)
    stderr=args.stderr
    stdout=args.stdout
    if 'fi' in command_specific_args:
        command_specific_args['fi']=cmo.util.genomes[args.fi]['fasta']
    for key in  ["version", "cmd"]:
        del command_specific_args[key]
    command_specific_args = dict((k, v) for k, v in command_specific_args.iteritems() if v)
    cmd = [bedtools_command]
    stdin=None
    for option, value in command_specific_args.items():
        if isinstance(value, list):
            cmd = cmd + ["-"+option] + value
            #bedtools edge case read from stdin
        else:
            if value ==True:
                cmd = cmd + ["-"+option]
            elif value!=False:
                cmd = cmd + ["-"+option, value]
                if value == "stdin":
                    stdin=sys.stdin
    cmo.util.call_cmd(" ".join(cmd), stderr=stderr, stdout=stdout, stdin=stdin)

     
