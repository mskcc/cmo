#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python

import argparse, os, sys, subprocess, re
import cmo, time, copy
from datetime import date

logger = cmo.util.get_logger()

def find_pindel_options(pindel_version):
    pindel_cmd = cmo.util.programs['pindel'][pindel_version]
    pindel_help = subprocess.Popen([pindel_cmd, "-h"], shell=True, stdout=subprocess.PIPE).communicate()[0]
    lines = pindel_help.split("\n")
    last_sarg=''
    last_larg=''
    last_desc=''
    parsed_options = []
    for line in lines:
        m = re.match(r"\s+(-\S)?/(--[\S_]+)", line)
        if m:
            if last_sarg:
                parsed_options.append((last_sarg, last_larg, last_desc))
            last_sarg = m.group(1)
            last_larg = m.group(2)
            last_desc=''
        else:
            last_desc = last_desc + line
    parsed_options.append((last_sarg, last_larg, last_desc))
    return parsed_options
                

def run_pindel(pindel_version, args):
    args_dict = copy.deepcopy(vars(args))
    del args_dict['version']
    del args_dict['vcf']
    del args_dict['bams']
    del args_dict['sample_names']
    command = [cmo.util.programs['pindel'][pindel_version]]
    for argument, value in args_dict.items():
        if value:
            if value == True:
                command = command + ["--"+argument.replace("_","-")]
            else:
                command = command + ["--"+argument.replace("_","-"), value]
    cmo.util.call_cmd(" ".join(command))


if __name__ =='__main__':
    preparser = argparse.ArgumentParser(description="run PINDEL", add_help=False)
    preparser.add_argument("-v", "--version", action="store", choices=cmo.util.programs['pindel'].keys(), default="default")
    opts, _ = preparser.parse_known_args()
    parser = argparse.ArgumentParser(parents=[preparser], add_help=True)
    pindel_options = find_pindel_options(opts.version)
    for (short_arg, long_arg, description) in  pindel_options:
        description=description.replace("%","%%")
        if re.search(r"default.*(true|false)", description):
            action="store_true"
        else:
            action="store"
        if short_arg and short_arg in ['-h', '-v', '-f']:
            continue;
        elif short_arg:
            parser.add_argument(short_arg, long_arg, action=action, help=description)
        else:
            parser.add_argument(long_arg, action=action, help=description)
    parser.add_argument("-f", "--fasta", choices=cmo.util.genomes.keys(), default="GRCh37")
    parser.add_argument("--sample_names", action="store", help="pass a config string multiple times to generate a config file on the fly") 
    parser.add_argument("--bams", action="store", help="dummy option to get cwltool to copy the file to the working dir..hacks") 
    parser.add_argument("--vcf", action="store", help="supply a vcf filename to run pindel2vcf automatically")
    args = parser.parse_args()
    genome_string = args.fasta
    args.fasta=cmo.util.genomes[args.fasta]['fasta']
    #hacks for cwl.. sorry everyone. lets just generate config on fly for now, maybe eventually we do it in exptool
    if args.bams != None and args.sample_names != None:
        args.sample_names = args.sample_names.split(" ")
        args.bams = args.bams.split(" ")
        fh=open(os.path.join(os.getcwd(),"temp.config"), "w")
        for index, value in enumerate(args.bams):
            fh.write("\t".join([args.bams[index], "400", args.sample_names[index]+ "\n"]))
        fh.close()
        args.config_file="temp.config"
    else:
        if not args.config_file:
            sys.exit(1)


    run_pindel(opts.version, args)
    if(args.vcf):
        pindel2vcf = cmo.util.programs['pindel2vcf'][opts.version]
        p2v_cmd = [pindel2vcf, "-r", args.fasta, "-R", genome_string, "-G", "-P", os.path.abspath(args.output_prefix), "-d",  date.fromtimestamp(time.time()).__str__(), "-v",  args.vcf]
        cmo.util.call_cmd(" ".join(p2v_cmd))
        
    #remove extra args if any exist
    #execute command



