#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python

import argparse, os, sys, re, subprocess,itertools
import cmo

logger = cmo.util.get_logger()

if __name__ =='__main__':
    #partially parse options to get versin/subcommand and add more options
    preparser = argparse.ArgumentParser(description="run picard", add_help=False)
    preparser.add_argument("--version", choices=cmo.util.programs['picard'].keys(), default="default")
    preparser.add_argument("--java-version", choices=cmo.util.programs['java'].keys(), default="default")
    preparser.add_argument("cmd")
    options, _ = preparser.parse_known_args()
    #time for monkey business
    picard_helper = cmo.picard.Picard(java_version=options.java_version, version=options.version)
    (sub_command_options, error_msg) = picard_helper.find_sub_command_options(options.cmd)
    if sub_command_options == None:
        logger.critical(error_msg)
        sys.exit(1)
    #ok it was a valid subcommand, add the options we found and the genome option
    parser = argparse.ArgumentParser(parents= [ preparser ] , add_help= True,
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    for arg, help in sub_command_options.items():
        help = help.replace("%","%%")
        if(arg == "R"):
           parser.add_argument("--R","--genome", required=True, choices=cmo.util.genomes.keys())
           continue
        if(arg =="LEVEL" or arg=="I"):
            parser.add_argument("--" + arg, action="append")
            continue
        if re.search("Required.", help) != None:
            required=True
        else:
            required=False
        parser.add_argument("--"+arg, action="store", help=help, required=required)
    parser.add_argument("--QUIET", action="store_true")
    parser.add_argument("--CREATE_MD5_FILE", action="store_true")
    parser.add_argument("--CREATE_INDEX", action="store_true")
    for arg in ['TMP_DIR', 'VERBOSITY', 'VALIDATION_STRINGENCY', 'COMPRESSION_LEVEL', 'MAX_RECORDS_IN_RAM', 'REFERENCE_SEQUENCE']:
        parser.add_argument("--"+arg, action="store")
    cmo.util.add_logging_options(parser)
    parser.prog="cmo_picard " + options.cmd
    args = parser.parse_args()
    command_specific_args = vars(args)
    default_args_override = {}
    if "R" in command_specific_args:
        genome = args.R
        default_args_override["REFERENCE_SEQUENCE"]=cmo.util.genomes[genome]['fasta'] 
    stdout = args.stdout
    stderr = args.stderr
    for key in  ["version", "java_version", "cmd", "R"]:
        if key in command_specific_args:
            del command_specific_args[key]
    cmo.util.remove_logging_options_from_dict(command_specific_args)
    #default_args is handled a little crappily, but not a big deal for now
    cmo.util.call_cmd(picard_helper.picard_cmd(options.cmd, command_specific_args=command_specific_args), stdout=stdout, stderr=stderr)
     
