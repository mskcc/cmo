#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python

import argparse, os, sys, re, subprocess,itertools
import cmo

def parse_options(trimgalore_command):
    trimgalore_help = subprocess.Popen(trimgalore_command + " -h",stdout=subprocess.PIPE,shell=True).communicate()[0]
    lines = trimgalore_help.split("\n")
    options_block = False
    usage = ''
    options = ''
    last_option = ''
    last_short_option = ''
    option_type = ''
    last_option_help = ' ' 
    valid_args = []
    for line in lines:
        m = re.match(r"^(-\S[^/]?)?/?(--\w+)[\t ]+(<\w+>)?[\t ]+(.*)$", line)
        if m:
            if last_option != '':
                valid_args.append((last_option, last_short_option, option_type, last_option_help))
            last_short_option = m.group(1)
            last_option = m.group(2)
            option_type = m.group(3)
            last_option_help = m.group(4)
        elif last_option:
            last_option_help += line
    valid_args.append((last_option, last_short_option, option_type, last_option_help))
#    valid_args = valid_args +  re.findall(r"(?:(-\S+) ([^-]+))", usage)
    return valid_args

if __name__ =='__main__':
    #partially parse options to get versin/subcommand and add more options
    verparser = argparse.ArgumentParser(description="run trimgalore", add_help=False)
    verparser.add_argument("--version", choices=cmo.util.programs['trimgalore'].keys(), default="default")
    options, _ = verparser.parse_known_args()
    preparser = argparse.ArgumentParser(parents=[verparser], add_help=False)
    trimgalore_command = os.path.join(cmo.util.programs['trimgalore'][options.version])
    command_options = parse_options(trimgalore_command)
    parser = argparse.ArgumentParser(parents= [ preparser ], add_help=True, 
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    for (arg, short_arg, arg_type, help) in command_options:
        if(short_arg == "-h" or short_arg =="-v"):
            #skip help and version
            continue
#       help = help.replace("%","%%")
        if arg=="--output_dir":
            parser.add_argument(arg, action="store", metavar='', help=help)
        elif arg_type and re.search("(INT|STRING|ERROR|ARGS)", arg_type):
            parser.add_argument(arg, action="store", metavar='', help=help)
        else:
            parser.add_argument(arg, action="store_true", help=help) 
    parser.add_argument("fastq1")
    parser.add_argument("fastq2", nargs="?")
#    parser.add_argument("--genome", required=True, choices=cmo.util.genomes.keys())
    cmo.util.add_logging_options(parser)
    args= parser.parse_args()
    command_specific_args = vars(args)
    stderr=args.stderr
    stdout=args.stdout
    cmo.util.remove_logging_options_from_dict(command_specific_args)
    fastq1 = args.fastq1
    fastq2 = args.fastq2
    for key in  ["version", "fastq1", "fastq2"]:
        del command_specific_args[key]
    command_specific_args = dict((k, v) for k, v in command_specific_args.iteritems() if v)
    cmd = [trimgalore_command]
    stdin=None
    for option, value in command_specific_args.items():
        if isinstance(value, list):
            cmd = cmd + ["-"+option] + value
            #bedtools edge case read from stdin
        else:
            if value ==True:
                cmd = cmd + ["--"+option]
            elif value!=False:
                cmd = cmd + ["--"+option, value]
                if value == "stdin":
                    stdin=sys.stdin
    cmd = cmd + [fastq1]
    if fastq2 != None:
        cmd = cmd + [fastq2]
    cmo.util.call_cmd(" ".join(cmd), stderr=stderr, stdout=stdout, stdin=stdin)

     
