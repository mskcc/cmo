#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python

import argparse, os, sys, re, subprocess, itertools, glob, getpass, tempfile, shutil
from operator import attrgetter
import textwrap as _textwrap
import cmo

# Custom help formatter to display args in alphabetical order, and fitted line wrap for sphinx
class SortingHelpFormatter(argparse.ArgumentDefaultsHelpFormatter):
    def add_arguments(self, actions):
        actions = sorted(actions, key=attrgetter('option_strings'))
        super(SortingHelpFormatter, self).add_arguments(actions)
    def _split_lines(self, text, width):
        text = self._whitespace_matcher.sub(' ', text).strip()
        return _textwrap.wrap(text, 78)

# Function that runs --help on the tool we've wrapped, and extracts documentation
def parse_script_help(script_path):
    perl = cmo.util.programs['perl']['default']
    help_text = subprocess.Popen(" ".join([perl, script_path, "-h"]), stdout=subprocess.PIPE, shell=True).communicate()[0]
    valid_args = re.findall(r"^\s*(--\S+)\s+([^\[\n]+)", help_text, re.M)
    defaults = re.findall(r"^\s*(--\S+)\s+[\S ]+\[([\S ]+)\]$", help_text, re.M)
    return dict(valid_args), dict(defaults)

if __name__ =='__main__':
    # We'll first need to figure out which version to run with "-h" to parse the help text
    preparser = argparse.ArgumentParser(description="Run maf2maf", add_help=False, formatter_class=SortingHelpFormatter)
    preparser.add_argument("--version", help="Version of tool to run", choices=cmo.util.programs['vcf2maf'].keys(), default="default")
    preparser.add_argument("--vep-release", help="Version of VEP and its cache to use", choices=cmo.util.programs['vep'].keys(), default="default")
    preparser.add_argument("--species", help="Species of variants in input", choices=["homo_sapiens","mus_musculus"], default="homo_sapiens")
    preparser.add_argument("--ncbi-build", help="Genome build of variants in input", choices=["GRCh37","GRCh38","GRCm38"], default="GRCh37")
    options, _ = preparser.parse_known_args()

    # Figure out the path to the actual Perl script that this Python wrapper will run
    script_path = cmo.util.programs['vcf2maf'][options.version] + "maf2maf.pl"
    # Extract arguments and their defaults, by parsing the --help output
    args_dict, defaults_dict = parse_script_help(script_path)

    # Let's change some of the defaults based on data in the CMO JSON
    defaults_dict['--vep-path'] = cmo.util.programs['vep'][options.vep_release]
    defaults_dict['--vep-data'] = cmo.util.genomes[options.ncbi_build]['vep_cache']
    defaults_dict['--ref-fasta'] = cmo.util.genomes[options.ncbi_build]['fasta']
    defaults_dict['--custom-enst'] = cmo.util.programs['vcf2maf'][options.version] + "data/isoform_overrides_at_mskcc"
    defaults_dict['--filter-vcf'] = cmo.util.genomes[options.ncbi_build]['exac']
    defaults_dict['--retain-cols'] = 'Center,Verification_Status,Validation_Status,Mutation_Status,Sequencing_Phase,Sequence_Source,Validation_Method,Score,BAM_file,Sequencer,Tumor_Sample_UUID,Matched_Norm_Sample_UUID,Caller'
    # This is just for display in --help; we'll create it later below
    tmp_root = "/scratch/<username>/..."
    defaults_dict['--tmp-dir'] = tmp_root

    # With arguments and defaults set, let's construct an argparse instance
    parser = argparse.ArgumentParser(parents = [preparser], add_help=True, formatter_class=SortingHelpFormatter)
    for arg, description in args_dict.items():
        # Hide a few arguments from the user, because we'll determine them ourselves
        if arg in ["--help","--man","--species","--ncbi-build","--cache-version"]:
            continue
        if arg in defaults_dict and arg not in ["--output-maf"]:
            parser.add_argument(arg, action="store", metavar='', help=description, default=defaults_dict[arg])
        else:
            parser.add_argument(arg, action="store", metavar='', help=description)

    # Now run the argparse instance, which will parse and execute, or print help text if requested
    args = parser.parse_args()
    args_dict = vars(args)

    # If user didn't define their own --tmp-dir, let's create one for them under /scratch/username
    if args_dict['tmp_dir'] == tmp_root:
        # Create a subdirectory under /scratch with the username, if it doesn't already exist
        tmp_root = "/scratch/" + getpass.getuser()
        if not os.path.exists(tmp_root):
            os.makedirs(tmp_root)
        # For machines without writable /scratch, default to creating a temp folder under /tmp
        tmp_dir = tempfile.mkdtemp(dir=tmp_root) if os.path.exists(tmp_root) else tempfile.mkdtemp(dir='/tmp')
        args_dict['tmp_dir'] = tmp_dir
        # If input is large, show the user a warning about limited storage in temp directories
        if os.path.getsize(args_dict['input_maf']) > 100000000:
            sys.stderr.write( "WARNING: Writing temporary files to " + tmp_dir + " which could " + 
                "fill up and interrupt your colleagues' work. If you're working with giant " +
                "files, then please define your own --tmp-dir.\n" )

    # If user defined non-default VEP release or NCBI build, then fetch new paths from CMO JSON
    if options.vep_release is not args.vep_release:
        args_dict['vep_path'] = cmo.util.programs['vep'][args.vep_release]
    if options.ncbi_build is not args.ncbi_build:
        args_dict['vep_data'] = cmo.util.genomes[args.ncbi_build]['vep_cache']
        args_dict['ref_fasta'] = cmo.util.genomes[args.ncbi_build]['fasta']
        args_dict['filter_vcf'] = cmo.util.genomes[args.ncbi_build]['exac']

    # We should not use the --filter-vcf argument unless we have one for this specific genome
    if not args_dict['filter_vcf']:
        del args_dict['filter_vcf']

    # Remove arguments that the actual wrapped tool won't recognize
    for key in ["version", "vep_release"]:
        del args_dict[key]

    # Build the command we're going to run
    cmd = [cmo.util.programs['perl']['default'], script_path]
    # Trim out arguments without values
    args_dict = dict((k, v) for k, v in args_dict.iteritems() if v)

    # Make sure the arguments are in a format that the script will accept, and kick it off
    for arg, value in args_dict.items():
        arg = arg.replace("_","-")
        cmd = cmd + ["--"+arg, value]
    sys.stderr.write( "RUNNING: " + " ".join( cmd ) + "\n" )
    cmo.util.call_cmd( " ".join( cmd ))
    shutil.rmtree(tmp_dir)
